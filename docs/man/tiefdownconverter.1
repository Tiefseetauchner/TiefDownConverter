.\" Automatically generated by Pandoc 3.1.13
.\"
.TH "TIEFDOWNCONVERTER" "1" "" "0.9.1\-ALPHA.1" "Lena Tauchner \- September 2025"
.SH NAME
tiefdownconverter \- convert structured Markdown projects to PDF, EPUB,
and more
.SH SYNOPSIS
\f[B]tiefdownconverter\f[R] [COMMAND] [OPTIONS]
.SH DESCRIPTION
\f[CR]tiefdownconverter\f[R] is a CLI tool for managing and converting
structured Markdown projects into nicely formatted outputs like PDF (via
LaTeX or Typst) and EPUB.
Supports templates, shared metadata, filters, and conversion profiles.
.PP
The tool may have a steep learning curve.
It is recommended to read the documentation and tutorials before using
the tool.
This manpage is only a brief overview of the commands and their usage.
.SS Requirements
This tool is essentially a wrapper around pandoc, xelatex, and typst.
It requires all these tools to be installed seperately, and will not
work otherwise.
Check the requirements using the \f[CR]check\-dependencies\f[R] command.
.SS Basic Usage
Initialize a project:
.IP
.EX
tiefdownconverter init mybook
.EE
.PP
Add your files to the \f[CR]Markdown/\f[R] directory (or the directory
you specified), named like \f[CR]Chapter 1 \- Intro.ext\f[R],
\f[CR]Chapter 2.ext\f[R], etc.
.PP
Convert to the default output:
.IP
.EX
tiefdownconverter convert
.EE
.SH COMMANDS
This is a comprehensive list of all commands and their usage, however it
is auto generated.
Details to the usage of tiefdownconverter can be found in the
documentation.
.SS tiefdownconverter
.IP
.EX
TiefDownConverter manages TiefDown projects.
TiefDown is a project structure meant to simplify the conversion process from Markdown to PDFs.
TiefDownConverter consolidates multiple conversion processes and templating systems to generate a configurable set or subset of output documents.
It is not in itself a converter, but a wrapper around pandoc, xelatex and typst. As such, it requires these dependencies to be installed.

Usage: tiefdownconverter [OPTIONS] <COMMAND>

Commands:
  convert             Convert a TiefDown project. By default, it will convert the current directory.
  init                Initialize a new TiefDown project.
  project             Update the TiefDown project.
  check\-dependencies  Validate dependencies are installed.
  help                Print this message or the help of the given subcommand(s)

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])

  \-V, \-\-version
          Print version
.EE
.SS Subcommands:
.IP \[bu] 2
convert
.IP \[bu] 2
init
.IP \[bu] 2
project
.IP \[bu] 2
check\-dependencies
.SS tiefdownconverter convert
.IP
.EX
Convert a TiefDown project. By default, it will convert the current directory.

Usage: tiefdownconverter convert [OPTIONS]

Options:
  \-p, \-\-project <PROJECT>
          The project to convert. If not provided, the current directory will be used.
  \-v, \-\-verbose
          Enable verbose output.
  \-t, \-\-templates <TEMPLATES>...
          The templates to use. If not provided, the default templates from the manifest file will be used. Cannot be used with \-\-profile.
  \-P, \-\-profile <PROFILE>
          The conversion profile to use. Cannot be used with \-\-templates.
  \-m, \-\-markdown\-projects <MARKDOWN_PROJECTS>...
          The markdown projects to convert. If not provided, all markdown projects will be converted.
  \-h, \-\-help
          Print help
.EE
.SS tiefdownconverter init
.IP
.EX
Initialize a new TiefDown project.

Usage: tiefdownconverter init [OPTIONS] [PROJECT]

Arguments:
  [PROJECT]
          The project to initialize. If not provided, the current directory will be used.

Options:
  \-t, \-\-templates <TEMPLATES>...
          The preset templates to use. If not provided, the default template.tex will be used.
          For custom templates, use the update command after initializing the project.
          If using a LiX template, make sure to install the corresponding .sty and .cls files from https://github.com/NicklasVraa/LiX. Adjust the metadata in template/meta.tex accordingly.
          
          
          [possible values: template.tex, booklet.tex, lix_novel_a4.tex, lix_novel_book.tex, template_typ.typ, default_epub]

  \-v, \-\-verbose
          Enable verbose output.

  \-n, \-\-no\-templates
          Do not include the default templates. You will need to add templates manually with Update

  \-f, \-\-force
          Delete the project if it already exists.

  \-m, \-\-markdown\-dir <MARKDOWN_DIR>
          The directory where the Markdown files are located. If not provided, Markdown/ will be used.

      \-\-smart\-clean
          Enables smart clean for the project with a default threshold of 5.
          If the number of conversion folders in the project is above this threshold, old folders will be cleaned, leaving only the threshold amount of folders.

      \-\-smart\-clean\-threshold <SMART_CLEAN_THRESHOLD>
          The threshold for smart clean. If not provided, the default threshold of 5 will be used.
          If the number of conversion folders in the project is above this threshold, old folders will be cleaned, leaving only the threshold amount of folders.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS tiefdownconverter project
.IP
.EX
Update the TiefDown project.

Usage: tiefdownconverter project [OPTIONS] [PROJECT] <COMMAND>

Commands:
  templates        Add or modify templates in the project.
  update\-manifest  Update the project manifest.
  pre\-processors   Manage the preprocessors of the project.
  processors       Manage the processors of the project.
  profiles         Manage the conversion profiles of the project.
  shared\-meta      Manage the shared metadata of the project.
  markdown         Manage the markdown projects of the project.
  list\-templates   List the templates in the project.
  clean            Clean temporary files from the TiefDown project.
  smart\-clean      Clean temporary files from the TiefDown project, leaving only the threshold amount of folders.
  help             Print this message or the help of the given subcommand(s)

Arguments:
  [PROJECT]  The project to edit. If not provided, the current directory will be used.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS Subcommands:
.IP \[bu] 2
templates
.IP \[bu] 2
update\-manifest
.IP \[bu] 2
pre\-processors
.IP \[bu] 2
processors
.IP \[bu] 2
profiles
.IP \[bu] 2
shared\-meta
.IP \[bu] 2
markdown
.IP \[bu] 2
list\-templates
.IP \[bu] 2
clean
.IP \[bu] 2
smart\-clean
.SS tiefdownconverter project templates
.IP
.EX
Add or modify templates in the project.

Usage: tiefdownconverter project templates [OPTIONS] <TEMPLATE> <COMMAND>

Commands:
  add     Add a new template to the project.
  remove  Remove a template from the project.
  update  Update a template in the project.
  help    Print this message or the help of the given subcommand(s)

Arguments:
  <TEMPLATE>  The template name to edit or add.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS Subcommands:
.IP \[bu] 2
add
.IP \[bu] 2
remove
.IP \[bu] 2
update
.SS tiefdownconverter project templates add
.IP
.EX
Add a new template to the project.
If using a preset template name, the preset will be copied to the template folder.
If using a custom template, make sure to add the respective files to the template folder.
Available preset templates are: template.tex, booklet.tex, lix_novel_a4.tex, lix_novel_book.tex, template_typ.typ, default_epub

Usage: tiefdownconverter project templates <TEMPLATE> add [OPTIONS]

Options:
  \-f, \-\-template\-file <TEMPLATE_FILE>
          The file to use as the template. If not provided, the template name will be used.

  \-v, \-\-verbose
          Enable verbose output.

  \-t, \-\-template\-type <TEMPLATE_TYPE>
          The type of the template. If not provided, the type will be inferred from the template file.
          
          [possible values: tex, typst, epub, custom\-preprocessors, custom\-processor]

  \-o, \-\-output <OUTPUT>
          The output file. If not provided, the template name will be used.

      \-\-filters <FILTERS>...
          The luafilters to use for pandoc conversion of this templates markdown.
          Luafilters are lua scripts applied during the pandoc conversion.
          You can add a folder or a filename. If adding a folder, it will be traversed recursively, and any .lua file will be added.
          See the pandoc documentation and \[aq]Writing filters\[aq] of the TiefDownConverter documentation for more details.

      \-\-preprocessors <PREPROCESSORS>
          The preprocessors to use for this template.
          A preprocessor defines the arguments passed to the pandoc conversion from the specified input format.
          Each input format can have at most one preprocessor. Multiple preprocessors for the same input format will lead to an error.
          There can be a preprocessor without an input format, which will be used if no other preprocessor matches the input format. Only one such preprocessor is allowed.
          If using a CustomPreprocessors template, at least one preprocessor is required.
          Preprocessors replace all arguments. Thus, with preprocessors, you need to define the output file and format.
          For templates, that is the file imported by the template.

      \-\-preprocessor\-output <PREPROCESSOR_OUTPUT>
          The output file of the preprocessor. If not provided, the template name with the appropriate ending will be used.
          This is the file the input gets converted to. When preprocessing the input files, the files will get converted, combined and written to this filename.

      \-\-processor <PROCESSOR>
          The processor to use for this template.
          A processor defines additional arguments passed to the conversion command.
          For LaTeX and typst templates, this allows extending the respective conversion parameters.
          Processors are incompatible with CustomPreprocessors conversions. Use preprocessors instead.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS tiefdownconverter project templates remove
.IP
.EX
Remove a template from the project.

Usage: tiefdownconverter project templates <TEMPLATE> remove [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project templates update
.IP
.EX
Update a template in the project.

Usage: tiefdownconverter project templates <TEMPLATE> update [OPTIONS]

Options:
      \-\-template\-file <TEMPLATE_FILE>
          The file to use as the template. If not provided, the template name will be used.

  \-v, \-\-verbose
          Enable verbose output.

      \-\-template\-type <TEMPLATE_TYPE>
          The type of the template. If not provided, the type will be inferred from the template file.
          Changing this is not recommended, as it is highly unlikely the type and only the type has changed. It is recommended to create a new template instead.
          
          [possible values: tex, typst, epub, custom\-preprocessors, custom\-processor]

      \-\-output <OUTPUT>
          The output file. If not provided, the template name will be used.

      \-\-filters <FILTERS>...
          The luafilters to use for pandoc conversion of this templates markdown.
          This replaces all existing filters.

      \-\-add\-filters <ADD_FILTERS>...
          The luafilters to use for pandoc conversion of this templates markdown.
          This adds to the existing filters.

      \-\-remove\-filters <REMOVE_FILTERS>...
          The luafilters to use for pandoc conversion of this templates markdown.
          This removes the filter from the existing filters.

      \-\-preprocessors <PREPROCESSORS>
          The preprocessors to use for this template.
          A preprocessor defines the arguments passed to the pandoc conversion from the specified input format.
          Each input format can have at most one preprocessor. Multiple preprocessors for the same input format will lead to an error.
          There can be a preprocessor without an input format, which will be used if no other preprocessor matches the input format. Only one such preprocessor is allowed.
          If using a CustomPreprocessor template, at least one preprocessor is required.
          Preprocessors replace all arguments. Thus, with preprocessors, you need to define the output file and format.
          For templates, that is the file imported by the template.

      \-\-add\-preprocessors <ADD_PREPROCESSORS>...
          The preprocessors to use for this template.
          This adds to the existing preprocessors.

      \-\-remove\-preprocessors <REMOVE_PREPROCESSORS>...
          The preprocessors to use for this template.
          This removes the preprocessor from the existing preprocessors.

      \-\-preprocessor\-output <PREPROCESSOR_OUTPUT>
          The output file of the preprocessor. If not provided, the template name with the appropriate ending will be used.
          This is the file the input gets converted to. When preprocessing the input files, the files will get converted, combined and written to this filename.

      \-\-processor <PROCESSOR>
          The processor to use for this template.
          A processor defines additional arguments passed to the conversion command.
          For LaTeX and typst templates, this allows extending the respective conversion parameters.
          Processors are incompatible with CustomPreprocessor conversions. Use preprocessors instead.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS tiefdownconverter project update\-manifest
.IP
.EX
Update the project manifest.

Usage: tiefdownconverter project update\-manifest [OPTIONS]

Options:
      \-\-smart\-clean <SMART_CLEAN>
          Enables smart clean for the project with a default threshold of 5.
          If the number of conversion folders in the project is above the smart_clean_threshold, old folders will be cleaned, leaving only the threshold amount of folders.
          
          [possible values: true, false]

  \-v, \-\-verbose
          Enable verbose output.

      \-\-smart\-clean\-threshold <SMART_CLEAN_THRESHOLD>
          The threshold for smart clean. If not provided, the default threshold of 5 will be used.
          If the number of conversion folders in the project is above this threshold, old folders will be cleaned, leaving only the threshold amount of folders.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS tiefdownconverter project pre\-processors
.IP
.EX
Manage the preprocessors of the project.
A preprocessor defines the arguments passed to the pandoc conversion from markdown.
If using a CustomPreprocessor template, a preprocessor is required.
Preprocessors replace all arguments. Thus, with preprocessors, you need to define the output file and format.
For templates, that is the file imported by the template.
Preprocessors are incompatible with epub conversion. Use processors instead.

Usage: tiefdownconverter project pre\-processors [OPTIONS] <COMMAND>

Commands:
  add     Add a new preprocessor to the project.
  remove  Remove a preprocessor from the project.
  list    List the preprocessors in the project.
  help    Print this message or the help of the given subcommand(s)

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS Subcommands:
.IP \[bu] 2
add
.IP \[bu] 2
remove
.IP \[bu] 2
list
.SS tiefdownconverter project pre\-processors add
.IP
.EX
Add a new preprocessor to the project.

Usage: tiefdownconverter project pre\-processors add [OPTIONS] <NAME> [\-\- <CLI_ARGS>...]

Arguments:
  <NAME>
          The name of the preprocessor to create.

  [CLI_ARGS]...
          The arguments to pass to the preprocessor.

Options:
      \-\-filter <FILTER>
          The file extension filter for the preprocessor.
          This defines which input files the preprocessor is applied to. If not provided, the preprocessor will be applied to all input files.
          Allows glob patterns. Excludes the leading dot. Only matches the file extension.

  \-v, \-\-verbose
          Enable verbose output.

      \-\-cli <CLI>
          The program to use as the preprocessor.
          Requires cli arguments
          Should Pandoc not be the required preprocessor for your use case, you can change the called cli program.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS tiefdownconverter project pre\-processors remove
.IP
.EX
Remove a preprocessor from the project.

Usage: tiefdownconverter project pre\-processors remove [OPTIONS] <NAME>

Arguments:
  <NAME>  The name of the preprocessor to remove.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project pre\-processors list
.IP
.EX
List the preprocessors in the project.

Usage: tiefdownconverter project pre\-processors list [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project processors
.IP
.EX
Manage the processors of the project.
A processor defines additional arguments passed to the conversion command.
For LaTeX and typst templates, this allows extending the respective conversion parameters.
For CustomProcessor templates, this allows adding custom pandoc parameters.
Processors are incompatible with CustomPreprocessors conversions. Use preprocessors instead.

Usage: tiefdownconverter project processors [OPTIONS] <COMMAND>

Commands:
  add     Add a new processor to the project.
  remove  Remove a processor from the project.
  list    List the processors in the project.
  help    Print this message or the help of the given subcommand(s)

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS Subcommands:
.IP \[bu] 2
add
.IP \[bu] 2
remove
.IP \[bu] 2
list
.SS tiefdownconverter project processors add
.IP
.EX
Add a new processor to the project.

Usage: tiefdownconverter project processors add [OPTIONS] <NAME> [\-\- <PROCESSOR_ARGS>...]

Arguments:
  <NAME>               The name of the processor to create.
  [PROCESSOR_ARGS]...  The arguments to pass to the processor.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project processors remove
.IP
.EX
Remove a processor from the project.

Usage: tiefdownconverter project processors remove [OPTIONS] <NAME>

Arguments:
  <NAME>  The name of the processor to remove.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project processors list
.IP
.EX
List the processors in the project.

Usage: tiefdownconverter project processors list [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project profiles
.IP
.EX
Manage the conversion profiles of the project.
A conversion profile defines a collection of templates to be converted at the same time.
This can be used to prepare presets (for example, web export, PDF export, ...).
It can also be used for defining default templates for markdown projects.

Usage: tiefdownconverter project profiles [OPTIONS] <COMMAND>

Commands:
  add     Add a new conversion profile to the project.
  remove  Remove a conversion profile from the project.
  list    List the conversion profiles in the project.
  help    Print this message or the help of the given subcommand(s)

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS Subcommands:
.IP \[bu] 2
add
.IP \[bu] 2
remove
.IP \[bu] 2
list
.SS tiefdownconverter project profiles add
.IP
.EX
Add a new conversion profile to the project.

Usage: tiefdownconverter project profiles add [OPTIONS] <NAME> [TEMPLATES]...

Arguments:
  <NAME>          The name of the profile to create.
  [TEMPLATES]...  The templates to add to the profile.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project profiles remove
.IP
.EX
Remove a conversion profile from the project.

Usage: tiefdownconverter project profiles remove [OPTIONS] <NAME>

Arguments:
  <NAME>  The name of the profile to remove.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project profiles list
.IP
.EX
List the conversion profiles in the project.

Usage: tiefdownconverter project profiles list [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project shared\-meta
.IP
.EX
Manage the shared metadata of the project.
This Metadata is shared between all markdown projects.
When converting, it is merged with the markdown project specific metadata.
When using the same key for shared and project metadata, the project metadata overrides the shared metadata.

Usage: tiefdownconverter project shared\-meta [OPTIONS] <COMMAND>

Commands:
  set     Add or change the metadata. Overrides previous keys.
  remove  Remove metadata.
  list    List the metadata.
  help    Print this message or the help of the given subcommand(s)

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS Subcommands:
.IP \[bu] 2
set
.IP \[bu] 2
remove
.IP \[bu] 2
list
.SS tiefdownconverter project shared\-meta set
.IP
.EX
Add or change the metadata. Overrides previous keys.

Usage: tiefdownconverter project shared\-meta set [OPTIONS] <KEY> <VALUE>

Arguments:
  <KEY>    The key to set.
  <VALUE>  The value to set.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project shared\-meta remove
.IP
.EX
Remove metadata.

Usage: tiefdownconverter project shared\-meta remove [OPTIONS] <KEY>

Arguments:
  <KEY>  The key to remove.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project shared\-meta list
.IP
.EX
List the metadata.

Usage: tiefdownconverter project shared\-meta list [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown
.IP
.EX
Manage the markdown projects of the project.
A markdown project defines the markdown conversion process for a project.
There can be multiple markdown projects with different markdown files.
Each markdown project also has a seperate output folder (\[aq].\[aq] per default).
A markdown project can have seperate metadata.
A markdown project can have resources that are copied to the respective conversion folder.

Usage: tiefdownconverter project markdown [OPTIONS] <COMMAND>

Commands:
  add        Add a new markdown project to the project.
  update     Update a markdown project in the project.
  meta       Manage the metadata of a markdown project.
  resources  Manage the resources of a markdown project.
  remove     Remove a markdown project from the project.
  list       List the markdown projects in the project.
  help       Print this message or the help of the given subcommand(s)

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS Subcommands:
.IP \[bu] 2
add
.IP \[bu] 2
update
.IP \[bu] 2
meta
.IP \[bu] 2
resources
.IP \[bu] 2
remove
.IP \[bu] 2
list
.SS tiefdownconverter project markdown add
.IP
.EX
Add a new markdown project to the project.

Usage: tiefdownconverter project markdown add [OPTIONS] <NAME> <PATH> <OUTPUT>

Arguments:
  <NAME>    The name of the markdown project to create.
  <PATH>    The path to the markdown project.
  <OUTPUT>  The output folder.

Options:
      \-\-default\-profile <DEFAULT_PROFILE>  The default profile to use for converting this project.
  \-v, \-\-verbose                            Enable verbose output.
  \-h, \-\-help                               Print help
.EE
.SS tiefdownconverter project markdown update
.IP
.EX
Update a markdown project in the project.

Usage: tiefdownconverter project markdown update [OPTIONS] <NAME>

Arguments:
  <NAME>  The name of the markdown project to update.

Options:
      \-\-path <PATH>                        The path to the markdown project.
  \-v, \-\-verbose                            Enable verbose output.
      \-\-output <OUTPUT>                    The output folder.
      \-\-default\-profile <DEFAULT_PROFILE>  The default profile to use for converting this project.
  \-h, \-\-help                               Print help
.EE
.SS tiefdownconverter project markdown meta
.IP
.EX
Manage the metadata of a markdown project.
This metadata is markdown project specific and is not shared between projects.
This metadata takes precedence over the shared metadata.

Usage: tiefdownconverter project markdown meta [OPTIONS] <NAME> <COMMAND>

Commands:
  set     Add or change the metadata. Overrides previous keys.
  remove  Remove metadata.
  list    List the metadata.
  help    Print this message or the help of the given subcommand(s)

Arguments:
  <NAME>
          The name of the markdown project to update.

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS Subcommands:
.IP \[bu] 2
set
.IP \[bu] 2
remove
.IP \[bu] 2
list
.SS tiefdownconverter project markdown meta set
.IP
.EX
Add or change the metadata. Overrides previous keys.

Usage: tiefdownconverter project markdown meta <NAME> set [OPTIONS] <KEY> <VALUE>

Arguments:
  <KEY>    The key to set.
  <VALUE>  The value to set.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown meta remove
.IP
.EX
Remove metadata.

Usage: tiefdownconverter project markdown meta <NAME> remove [OPTIONS] <KEY>

Arguments:
  <KEY>  The key to remove.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown meta list
.IP
.EX
List the metadata.

Usage: tiefdownconverter project markdown meta <NAME> list [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown resources
.IP
.EX
Manage the resources of a markdown project.
Resources are a way to include meta information and resources on a per project basis.
This is helpful for example for including a custom css file for a project, as that is not possible purely with metadata.
Resources are stored in the markdown folder and copied to the conversion directory for that profile before conversion.

Usage: tiefdownconverter project markdown resources [OPTIONS] <NAME> <COMMAND>

Commands:
  add     Add a new resource to the project.
  remove  Remove a resource from the project.
  list    List the resources in the project.
  help    Print this message or the help of the given subcommand(s)

Arguments:
  <NAME>
          The name of the markdown project to update.

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS Subcommands:
.IP \[bu] 2
add
.IP \[bu] 2
remove
.IP \[bu] 2
list
.SS tiefdownconverter project markdown resources add
.IP
.EX
Add a new resource to the project.

Usage: tiefdownconverter project markdown resources <NAME> add [OPTIONS] [\-\- <PATHS>...]

Arguments:
  [PATHS]...  The paths to the resources. Seperated by spaces.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown resources remove
.IP
.EX
Remove a resource from the project.

Usage: tiefdownconverter project markdown resources <NAME> remove [OPTIONS] <PATH>

Arguments:
  <PATH>  The path to the resource.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown resources list
.IP
.EX
List the resources in the project.

Usage: tiefdownconverter project markdown resources <NAME> list [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown remove
.IP
.EX
Remove a markdown project from the project.

Usage: tiefdownconverter project markdown remove [OPTIONS] <NAME>

Arguments:
  <NAME>  The name of the markdown project to remove.

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project markdown list
.IP
.EX
List the markdown projects in the project.

Usage: tiefdownconverter project markdown list [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project list\-templates
.IP
.EX
List the templates in the project.

Usage: tiefdownconverter project list\-templates [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project clean
.IP
.EX
Clean temporary files from the TiefDown project.

Usage: tiefdownconverter project clean [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
.SS tiefdownconverter project smart\-clean
.IP
.EX
Clean temporary files from the TiefDown project.
If the number of conversion folders in the project is above this threshold, old folders will be cleaned, leaving only the threshold amount of folders.
The threshold is set to 5 by default, and is overwritten by the threshold in the manifest.

Usage: tiefdownconverter project smart\-clean [OPTIONS]

Options:
  \-v, \-\-verbose
          Enable verbose output.

  \-h, \-\-help
          Print help (see a summary with \[aq]\-h\[aq])
.EE
.SS tiefdownconverter check\-dependencies
.IP
.EX
Validate dependencies are installed.

Usage: tiefdownconverter check\-dependencies [OPTIONS]

Options:
  \-v, \-\-verbose  Enable verbose output.
  \-h, \-\-help     Print help
.EE
